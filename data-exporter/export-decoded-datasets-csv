#!/usr/bin/env python3
import fileinput
from cassandra.cluster import Cluster
import os
import pipeline
import logging

logger = logging.getLogger('export')
logger.setLevel(logging.INFO)

logging.basicConfig(level=logging.ERROR)

cluster = Cluster(connect_timeout=60, control_connection_timeout=60.0)
session = cluster.connect('waggle')
query = 'SELECT timestamp, plugin_name, plugin_version, parameter, data FROM sensor_data_raw WHERE node_id=%s AND date=%s'

lines = list(fileinput.input())

for i, line in enumerate(lines):
    try:
        fields = line.split()
        node_id = fields[0]
        date = fields[2]
        partition_key = (fields[1], fields[2])

        prefix = 'datasets/2/{}'.format(node_id)
        os.makedirs(prefix, exist_ok=True)
        filename = '{}/{}.csv'.format(prefix, date)

        rows = session.execute(query, partition_key)

        logger.info('{} [{:.0%}]'.format(filename, i / len(lines)))

        with open(filename, 'w') as outfile:
            for row in rows:
                try:
                    results = pipeline.decode(row)
                except KeyboardInterrupt:
                    break
                except Exception as exc:
                    continue

                for sensor, values in results.items():
                    if isinstance(values, dict):
                        enum = values.items()
                    elif isinstance(values, list) or isinstance(values, tuple):
                        enum = enumerate(values)
                    else:
                        continue

                    for name, value in enum:
                        columns = [
                            node_id,
                            row.timestamp.strftime('%Y/%m/%d %H:%M:%S'),
                            ':'.join([row.plugin_name, row.plugin_version]),
                            row.parameter,
                            sensor,
                            str(name),
                            str(value),
                        ]

                        print(';'.join(columns), file=outfile)

    except KeyboardInterrupt:
        break
    except Exception as exc:
        logger.exception('failed to decode row: {}'.format(row))
